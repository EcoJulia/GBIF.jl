{
    "docs": [
        {
            "location": "/", 
            "text": "Access GBIF data with Julia\n\n\nThis package offers access to biodiversity data through the Global Biodiversity Information Facility (\nGBIF\n) API. The package currently supports access to occurrence information, and limited support for taxonomic information. There are a limited number of cleaning routines built-in, but more can easily be added.\n\n\n\n\nHow to install\n\n\nThe package can be installed from the Julia console:\n\n\nPkg\n.\nadd\n(\nGBIF\n)\n\n\n\n\n\n\n\n\nHow to use\n\n\nAfter installing it, load the package as usual:\n\n\nusing\n \nGBIF\n\n\n\n\n\n\nThis documentation will walk you through the various features.", 
            "title": "Home"
        }, 
        {
            "location": "/#access-gbif-data-with-julia", 
            "text": "This package offers access to biodiversity data through the Global Biodiversity Information Facility ( GBIF ) API. The package currently supports access to occurrence information, and limited support for taxonomic information. There are a limited number of cleaning routines built-in, but more can easily be added.", 
            "title": "Access GBIF data with Julia"
        }, 
        {
            "location": "/#how-to-install", 
            "text": "The package can be installed from the Julia console:  Pkg . add ( GBIF )", 
            "title": "How to install"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "After installing it, load the package as usual:  using   GBIF   This documentation will walk you through the various features.", 
            "title": "How to use"
        }, 
        {
            "location": "/occurrences/", 
            "text": "Retrieving occurrences\n\n\nThe most common task is to retrieve a number of occurrences. The core type of this package is \nOccurrence\n, which stores a number of data and metadata associated with observations.\n\n\n\n\nGetting a single occurrence\n\n\n#\n\n\nGBIF.occurrence\n \n \nFunction\n.\n\n\nReturn an interpreted occurrence given its key\n\n\nsource\n\n\nThis can be used to retrieve \noccurrence \n1425976049\n, with\n\n\nusing\n \nGBIF\n\n\noccurrence\n(\n1425976049\n)\n\n\n\n\n\n\n\n\nGetting multiple occurrences\n\n\n#\n\n\nGBIF.occurrences\n \n \nMethod\n.\n\n\nSearch for occurrences\n\n\nThis function will return the latest occurrences \u2013 usually 20, but this is entirely determined by the server default page size. This is mostly useful to get a few results fast for illustration purposes.\n\n\nsource\n\n\nWhen called with no arguments, this function will return a list of the latest 20 occurrences recorded in GBIF. Additional arguments can be specified to filter some occurrences. They are detailed in the \"Using queries\" section of this manual.\n\n\nNote that the \nOccurrences\n type, returned by \noccurrences\n, implements all the necessary methods to iterate over. For example, this allows writing the following:\n\n\no\n \n=\n \noccurrences\n()\n\n\nfor\n \nsingle_occ\n \nin\n \no\n\n  \nprintln\n(\no\n.\ntaxonKey\n)\n\n\nend\n\n\n\n\n\n\n\n\nBatch-download of occurrences\n\n\n#\n\n\nGBIF.next!\n \n \nFunction\n.\n\n\nGet the next page of results\n\n\nsource\n\n\n#\n\n\nGBIF.complete!\n \n \nFunction\n.\n\n\nGet all pages of results\n\n\nsource", 
            "title": "Getting data"
        }, 
        {
            "location": "/occurrences/#retrieving-occurrences", 
            "text": "The most common task is to retrieve a number of occurrences. The core type of this package is  Occurrence , which stores a number of data and metadata associated with observations.", 
            "title": "Retrieving occurrences"
        }, 
        {
            "location": "/occurrences/#getting-a-single-occurrence", 
            "text": "#  GBIF.occurrence     Function .  Return an interpreted occurrence given its key  source  This can be used to retrieve  occurrence  1425976049 , with  using   GBIF  occurrence ( 1425976049 )", 
            "title": "Getting a single occurrence"
        }, 
        {
            "location": "/occurrences/#getting-multiple-occurrences", 
            "text": "#  GBIF.occurrences     Method .  Search for occurrences  This function will return the latest occurrences \u2013 usually 20, but this is entirely determined by the server default page size. This is mostly useful to get a few results fast for illustration purposes.  source  When called with no arguments, this function will return a list of the latest 20 occurrences recorded in GBIF. Additional arguments can be specified to filter some occurrences. They are detailed in the \"Using queries\" section of this manual.  Note that the  Occurrences  type, returned by  occurrences , implements all the necessary methods to iterate over. For example, this allows writing the following:  o   =   occurrences ()  for   single_occ   in   o \n   println ( o . taxonKey )  end", 
            "title": "Getting multiple occurrences"
        }, 
        {
            "location": "/occurrences/#batch-download-of-occurrences", 
            "text": "#  GBIF.next!     Function .  Get the next page of results  source  #  GBIF.complete!     Function .  Get all pages of results  source", 
            "title": "Batch-download of occurrences"
        }, 
        {
            "location": "/queries/", 
            "text": "Query parameters\n\n\n#\n\n\nGBIF.occurrences\n \n \nMethod\n.\n\n\nSearch for occurrences\n\n\nReturns occurrences that correspond to a filter, given in \nq\n as a dictionary.\n\n\nsource", 
            "title": "Using queries"
        }, 
        {
            "location": "/queries/#query-parameters", 
            "text": "#  GBIF.occurrences     Method .  Search for occurrences  Returns occurrences that correspond to a filter, given in  q  as a dictionary.  source", 
            "title": "Query parameters"
        }, 
        {
            "location": "/qaqc/", 
            "text": "Filtering observations\n\n\nWithin an \nOccurrences\n object, the occurrences themselves are stored in a view. A view is basically an array that can be masked, so it is possible to retain all of the raw data, while only presenting the data that pass filtering.\n\n\n\n\nApply filtering to the data\n\n\n#\n\n\nGBIF.qualitycontrol!\n \n \nFunction\n.\n\n\nCleans a search output\n\n\nUPDATE\n\n\nsource\n\n\n\n\nList of filters\n\n\n#\n\n\nGBIF.have_both_coordinates\n \n \nFunction\n.\n\n\nBoth latitude and longitude are present\n\n\nThis filter will only retain occurrences that have \nboth\n a latitude and a longitude field.\n\n\nsource\n\n\n#\n\n\nGBIF.have_neither_zero_coordinates\n \n \nFunction\n.\n\n\nNeither latitude nor longitude are 0.0\n\n\nThis filter will only retain occurrences that are \nnot\n at the (0,0) coordinate.\n\n\nsource\n\n\n#\n\n\nGBIF.have_no_zero_coordinates\n \n \nFunction\n.\n\n\nAt most one of latitude and longitude is 0.0\n\n\nThis filter will only retain occurrences that have \nat most\n one coordinate being exactly 0.0.\n\n\nsource\n\n\n#\n\n\nGBIF.have_no_issues\n \n \nFunction\n.\n\n\nNo known issues at all\n\n\nThis filter will retain no observation. At least not in theory, but it is very rare to have GBIF records with absolutely no issues. Its use is discouraged.\n\n\nBy design, it is the default argument for \nqualitycontrol!\n \u2013 it's your job to decide precisely which filters you need to use.\n\n\nsource\n\n\n#\n\n\nGBIF.have_ok_coordinates\n \n \nFunction\n.\n\n\nNo coordinates issues except rounding and WGS84 assumption\n\n\nThis filter will retain observations that have no issues, with the exception of assuming WGS84 projection (which a large number of GBIF records do), and rounded coordinates (same thing). It is a reasonable filter for most use cases.\n\n\nsource\n\n\n\n\nMaking your own filters\n\n\nFilter functions are all sharing the same declaration: they accept a single \nOccurrence\n object as input, and return a boolean as output. Think of the filter as a question you ask about the occurrence object. Does it have no know issues? If this is \ntrue\n, then we keep this record. If not, we reject it.\n\n\n\n\nRemoving filters\n\n\n#\n\n\nGBIF.showall!\n \n \nFunction\n.\n\n\nShow all occurrences\n\n\nThis function reverses the action of \nqualitycontrol!\n. It will unmask all records that have been removed under the current filters.\n\n\nsource", 
            "title": "Filtering records"
        }, 
        {
            "location": "/qaqc/#filtering-observations", 
            "text": "Within an  Occurrences  object, the occurrences themselves are stored in a view. A view is basically an array that can be masked, so it is possible to retain all of the raw data, while only presenting the data that pass filtering.", 
            "title": "Filtering observations"
        }, 
        {
            "location": "/qaqc/#apply-filtering-to-the-data", 
            "text": "#  GBIF.qualitycontrol!     Function .  Cleans a search output  UPDATE  source", 
            "title": "Apply filtering to the data"
        }, 
        {
            "location": "/qaqc/#list-of-filters", 
            "text": "#  GBIF.have_both_coordinates     Function .  Both latitude and longitude are present  This filter will only retain occurrences that have  both  a latitude and a longitude field.  source  #  GBIF.have_neither_zero_coordinates     Function .  Neither latitude nor longitude are 0.0  This filter will only retain occurrences that are  not  at the (0,0) coordinate.  source  #  GBIF.have_no_zero_coordinates     Function .  At most one of latitude and longitude is 0.0  This filter will only retain occurrences that have  at most  one coordinate being exactly 0.0.  source  #  GBIF.have_no_issues     Function .  No known issues at all  This filter will retain no observation. At least not in theory, but it is very rare to have GBIF records with absolutely no issues. Its use is discouraged.  By design, it is the default argument for  qualitycontrol!  \u2013 it's your job to decide precisely which filters you need to use.  source  #  GBIF.have_ok_coordinates     Function .  No coordinates issues except rounding and WGS84 assumption  This filter will retain observations that have no issues, with the exception of assuming WGS84 projection (which a large number of GBIF records do), and rounded coordinates (same thing). It is a reasonable filter for most use cases.  source", 
            "title": "List of filters"
        }, 
        {
            "location": "/qaqc/#making-your-own-filters", 
            "text": "Filter functions are all sharing the same declaration: they accept a single  Occurrence  object as input, and return a boolean as output. Think of the filter as a question you ask about the occurrence object. Does it have no know issues? If this is  true , then we keep this record. If not, we reject it.", 
            "title": "Making your own filters"
        }, 
        {
            "location": "/qaqc/#removing-filters", 
            "text": "#  GBIF.showall!     Function .  Show all occurrences  This function reverses the action of  qualitycontrol! . It will unmask all records that have been removed under the current filters.  source", 
            "title": "Removing filters"
        }
    ]
}