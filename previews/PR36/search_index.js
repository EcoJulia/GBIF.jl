var documenterSearchIndex = {"docs":
[{"location":"dataframes/#Integration-with-DataFrames.jl-1","page":"DataFrames.jl support","title":"Integration with DataFrames.jl","text":"","category":"section"},{"location":"dataframes/#","page":"DataFrames.jl support","title":"DataFrames.jl support","text":"If the package DataFrames.jl is loaded, GBIF.jl will gain additional capacities, namely the ability to export a GBIFRecords as a DataFrame – this may not include the entire information available in a GBIFRecord, but this represents a way to rapidly export the results for further analyses. Note that the taxonomy of the GBIFTaxon for every rows is also expanded.","category":"page"},{"location":"dataframes/#","page":"DataFrames.jl support","title":"DataFrames.jl support","text":"using GBIF\nusing DataFrames\n\nbats = GBIF.taxon(\"Chiroptera\"; strict=false)\nfirst(DataFrame(occurrences(bats)), 5)","category":"page"},{"location":"filter/#Filtering-observations-1","page":"Query.jl support","title":"Filtering observations","text":"","category":"section"},{"location":"filter/#","page":"Query.jl support","title":"Query.jl support","text":"The filtering of GBIFRecords is best done using the Query.jl package, on the view of the records object.","category":"page"},{"location":"filter/#","page":"Query.jl support","title":"Query.jl support","text":"This can be one way to generate a DataFrame, by selecting the required columns:","category":"page"},{"location":"filter/#","page":"Query.jl support","title":"Query.jl support","text":"using GBIF\nusing DataFrames\nusing Query\n\nt = taxon(\"Carnivora\", strict=false)\nset = occurrences(t)\nfor rep in 1:10\n    occurrences!(set)\nend\n\ntdf = view(set) |>\n    @filter(_.rank == \"SPECIES\") |>\n    @map({_.taxon.name, _.country}) |>\n    DataFrame\n\ntdf","category":"page"},{"location":"filter/#","page":"Query.jl support","title":"Query.jl support","text":"Alternatively, this can allow to select only some records in an array:","category":"page"},{"location":"filter/#","page":"Query.jl support","title":"Query.jl support","text":"using GBIF\nusing DataFrames\nusing Query\n\nset = occurrences()\nfor rep in 1:10\n    occurrences!(set)\nend\n\ntdf = for s in view(set) begin\n    @where s.rank == \"SPECIES\"\n    @select s\n    @collect\nend\n\ntdf","category":"page"},{"location":"data/#Retrieving-data-1","page":"Getting data","title":"Retrieving data","text":"","category":"section"},{"location":"data/#Getting-taxonomic-information-1","page":"Getting data","title":"Getting taxonomic information","text":"","category":"section"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"taxon","category":"page"},{"location":"data/#GBIF.taxon","page":"Getting data","title":"GBIF.taxon","text":"Get information about a taxon at any level\n\ntaxon(name::String)\n\nThis function will look for a taxon by its (scientific) name in the GBIF reference taxonomy.\n\nOptional arguments are\n\nrank::Union{Symbol,Nothing}=:SPECIES – the rank of the taxon you want. This is part of a controlled vocabulary, and can only be one of :DOMAIN, :CLASS, :CULTIVAR, :FAMILY, :FORM, :GENUS, :INFORMAL, :ORDER, :PHYLUM,, :SECTION, :SUBCLASS, :VARIETY, :TRIBE, :KINGDOM, :SUBFAMILY, :SUBFORM, :SUBGENUS, :SUBKINGDOM, :SUBORDER, :SUBPHYLUM, :SUBSECTION, :SUBSPECIES, :SUBTRIBE, :SUBVARIETY, :SUPERCLASS, :SUPERFAMILY, :SUPERORDER, and :SPECIES\nstrict::Bool=true – whether the match should be strict, or fuzzy\n\nFinally, one can also specify other levels of the taxonomy, using  kingdom, phylum, class, order, family, and genus, all of which can either be String or Nothing.\n\nIf a match is found, the result will be given as a GBIFTaxon. If not, this function will return nothing and give a warning.\n\n\n\n\n\nGet information about a taxon at any level using taxonID\n\ntaxon(id::Int)\n\nThis function will look for a taxon by its taxonID in the GBIF reference taxonomy.\n\n\n\n\n\n","category":"function"},{"location":"data/#Getting-occurrence-data-1","page":"Getting data","title":"Getting occurrence data","text":"","category":"section"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"The most common task is to retrieve a number of occurrences. The core type of this package is GBIFRecord, which stores a number of data and metadata associated with observations of occurrences.","category":"page"},{"location":"data/#Single-occurrence-1","page":"Getting data","title":"Single occurrence","text":"","category":"section"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"occurrence","category":"page"},{"location":"data/#GBIF.occurrence","page":"Getting data","title":"GBIF.occurrence","text":"Return an interpreted occurrence given its key\n\noccurrence(key::Union{String, Integer})\n\nThe key can be given as a string or as an integer.\n\n\n\n\n\n","category":"function"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"This can be used to retrieve occurrence 1258202889, with","category":"page"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"using GBIF\noccurrence(1258202889)","category":"page"},{"location":"data/#Multiple-occurrences-1","page":"Getting data","title":"Multiple occurrences","text":"","category":"section"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"occurrences()\noccurrences(t::GBIFTaxon)","category":"page"},{"location":"data/#GBIF.occurrences-Tuple{}","page":"Getting data","title":"GBIF.occurrences","text":"Retrieve latest occurrences based on a query\n\noccurrences(query::Pair...)\n\nThis function will return the latest occurrences matching the queries – usually 20, but this is entirely determined by the server default page size. The query parametes must be given as pairs, and are optional. Omitting the query will return the latest recorded occurrences.\n\n\n\n\n\n","category":"method"},{"location":"data/#GBIF.occurrences-Tuple{GBIFTaxon}","page":"Getting data","title":"GBIF.occurrences","text":"Retrieve latest occurrences for a taxon based on a query\n\noccurrences(t::GBIFTaxon, query::Pair...)\n\nReturns occurrences that correspond to a filter, given in q as a dictionary. When first called, this function will return the latest 20 hits (or whichever default page size GBIF uses). Future occurrences can be queried with next! or complete!.\n\n\n\n\n\n","category":"method"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"When called with no arguments, this function will return a list of the latest 20 occurrences recorded in GBIF. Note that the GBIFRecords type, returned by occurrences, implements all the necessary methods to iterate over collections. For example, this allows writing the following:","category":"page"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"using GBIF\no = occurrences()\nfor single_occ in o\n  print(single_occ)\nend","category":"page"},{"location":"data/#Query-parameters-1","page":"Getting data","title":"Query parameters","text":"","category":"section"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"occurrences(query::Pair...)\noccurrences(t::GBIFTaxon, query::Pair...)","category":"page"},{"location":"data/#GBIF.occurrences-Tuple{Vararg{Pair,N} where N}","page":"Getting data","title":"GBIF.occurrences","text":"Retrieve latest occurrences based on a query\n\noccurrences(query::Pair...)\n\nThis function will return the latest occurrences matching the queries – usually 20, but this is entirely determined by the server default page size. The query parametes must be given as pairs, and are optional. Omitting the query will return the latest recorded occurrences.\n\n\n\n\n\n","category":"method"},{"location":"data/#GBIF.occurrences-Tuple{GBIFTaxon,Vararg{Pair,N} where N}","page":"Getting data","title":"GBIF.occurrences","text":"Retrieve latest occurrences for a taxon based on a query\n\noccurrences(t::GBIFTaxon, query::Pair...)\n\nReturns occurrences that correspond to a filter, given in q as a dictionary. When first called, this function will return the latest 20 hits (or whichever default page size GBIF uses). Future occurrences can be queried with next! or complete!.\n\n\n\n\n\n","category":"method"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"For example, we can get the data on observations of bats between -30 and 30 of latitudes using the following syntax:","category":"page"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"using GBIF\nbats = GBIF.taxon(\"Chiroptera\"; strict=false)\nfor occ in occurrences(bats, \"decimalLatitude\" => (-30.0, 30.0))\n  println(\"$(occ.scientific) -- latitude = $(occ.latitude)\")\nend","category":"page"},{"location":"data/#Batch-download-of-occurrences-1","page":"Getting data","title":"Batch-download of occurrences","text":"","category":"section"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"occurrences!","category":"page"},{"location":"data/#GBIF.occurrences!","page":"Getting data","title":"GBIF.occurrences!","text":"Get the next page of results\n\nThis function will retrieve the next page of results. By default, it will walk through queries 20 at a time. This can be modified by changing the .query[\"limit\"] value, to any value below 300, which is the limit set by GBIF for the queries.\n\nIf filters have been applied to this query before, they will be removed to ensure that the previous and the new occurrences have the same status, but only for records that have already been retrieved.\n\n\n\n\n\n","category":"function"},{"location":"data/#","page":"Getting data","title":"Getting data","text":"using GBIF\ncan_most_recent = occurrences(\"hasCoordinate\" => true, \"country\" => \"CA\")\noccurrences!(can_most_recent)","category":"page"},{"location":"#Access-GBIF-data-with-Julia-1","page":"Home","title":"Access GBIF data with Julia","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package offers access to biodiversity data through the Global Biodiversity Information Facility (GBIF) API. The package currently supports access to occurrence information, and limited support for taxonomic information. There are a limited number of cleaning routines built-in, but more can easily be added.","category":"page"},{"location":"#How-to-install-1","page":"Home","title":"How to install","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"The package can be installed from the Julia console:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Pkg.add(\"GBIF\")","category":"page"},{"location":"#How-to-use-1","page":"Home","title":"How to use","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"After installing it, load the package as usual:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"using GBIF","category":"page"},{"location":"#","page":"Home","title":"Home","text":"This documentation will walk you through the various features.","category":"page"},{"location":"types/#Data-representation-1","page":"Types","title":"Data representation","text":"","category":"section"},{"location":"types/#","page":"Types","title":"Types","text":"GBIFTaxon\nGBIFRecord\nGBIFRecords","category":"page"},{"location":"types/#GBIF.GBIFTaxon","page":"Types","title":"GBIF.GBIFTaxon","text":"Representation of a GBIF taxon\n\nAll taxonomic level fields can either be missing, or a pair linking the name of the taxon/level to its unique key in the GBIF database.\n\nname - the vernacular name of the taxon\n\nscientific - the accepted scientific name of the species\n\nstatus - the status of the taxon\n\nmatch - the type of match\n\nkingdom - a Pair linking the name of the kingdom to its unique ID\n\nphylum - a Pair linking the name of the phylum to its unique ID\n\nclass - a Pair linking the name of the class to its unique ID\n\norder - a Pair linking the name of the order to its unique ID\n\nfamily - a Pair linking the name of the family to its unique ID\n\ngenus - a Pair linking the name of the genus to its unique ID\n\nspecies - a Pair linking the name of the species to its unique ID\n\nconfidence - an Int64 to note the confidence in the match\n\nsynonym - a Boolean indicating whether the taxon is a synonym\n\n\n\n\n\n","category":"type"},{"location":"types/#GBIF.GBIFRecord","page":"Types","title":"GBIF.GBIFRecord","text":"Represents an occurrence in the GBIF format\n\nThis is currently a subset of all the fields. This struct is not mutable – this ensures that the objects returned from the GBIF database are never modified by the user.\n\nThe taxon field is a GBIFTaxon object, and can therefore be manipulated as any other GBIFTaxon.\n\n\n\n\n\n","category":"type"},{"location":"types/#GBIF.GBIFRecords","page":"Types","title":"GBIF.GBIFRecords","text":"List of occurrences and metadata\n\nThis type has actually very few information, besides offset (the number of records already retrieved) and count (the total number of records). The query field stores the query parameters. This type is mutable and fully iterable.\n\nThe occurrences field is pre-allocated, meaning that it will contain #undef elements up to the total number of hits on GBIF. When iterating, this is taken care of automatically, but this needs to be accounted for if writing code that accesses this field directly.\n\n\n\n\n\n","category":"type"}]
}
